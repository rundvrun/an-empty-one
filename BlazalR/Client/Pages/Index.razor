@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazalR.Shared.Model
@using BlazalR.Shared.Protobuf
@using BlazalR.Client.Extensions
@inject NavigationManager Navigation
@inject WeatherForecasts.WeatherForecastsClient WeatherForecastsClient
@implements IAsyncDisposable

<PageTitle>BlazalR</PageTitle>

<style>
	.msg-onerror {
		color: red;
	}

	.msg-onpick {
		color: blue;
	}
</style>

<h1>Weather forecast</h1>
<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Date</th>
				<th>Temp. (C)</th>
				<th>Summary</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var forecast in forecasts)
			{
				<tr>
					<td>@forecast.DateTimeStamp.ToDateTime().ToShortDateString()</td>
					<td>@forecast.TemperatureC</td>
					<td>@forecast.Summary</td>
				</tr>
			}
		</tbody>
	</table>
}

<div class="form-group">
	<label>
		User:
		<input @bind="userInput" />
	</label>
</div>
<div class="form-group">
	<label>
		Item:
		<input @bind="messageInput" size="50" />
	</label>
</div>
<button @onclick="Pick" disabled="@(!IsConnected)">Pick</button>

<hr>

<ul id="messagesList">
	@foreach (var message in messages)
	{
		<li class="@MessageStyle(message.type)">@message.value</li>
	}
</ul>

@code {
	private HubConnection? hubConnection;
	private List<(string type, string value)> messages = new();
	private string? userInput;
	private string? messageInput;
	private IList<WeatherForecastModel>? forecasts;

	private string MessageStyle(string type) => $"msg-{type}".ToLower();

	protected override async Task OnInitializedAsync()
	{
		forecasts = (await WeatherForecastsClient.GetWeatherAsync(new WeatherForecastModel())).Forecasts;

		hubConnection = new HubConnectionBuilder()
		.WithUrl(Navigation.ToAbsoluteUri("/chathub"))
		.Build();

		hubConnection.OnMessage<MessageType.OnPick>(pickData =>
		{
			var encodedMsg = $"{pickData.Username} picked {pickData.Count} {pickData.ItemName}";
			messages.Add((nameof(MessageType.OnPick), encodedMsg));
			StateHasChanged();
		});

		hubConnection.OnMessage<MessageType.OnError>(err =>
		{
			var encodedMsg = $"{err.Username} error: {err.Message}";
			messages.Add((nameof(MessageType.OnError), encodedMsg));
			StateHasChanged();
		});

		await hubConnection.StartAsync();
	}

	private async Task Pick()
	{
		if (string.IsNullOrEmpty(userInput))
		{
			return;
		}
		if (hubConnection is not null)
		{
			await hubConnection.SendAsync("PickItem", userInput, messageInput);
		}
	}

	public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}