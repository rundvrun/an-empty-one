@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazalR.Shared.Model
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>BlazalR</PageTitle>

<style>
    .msg-onerror {
        color: red;
    }

    .msg-onpick {
        color: blue;
    }
</style>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Item:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Pick" disabled="@(!IsConnected)">Pick</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li class="@MessageStyle(message.type)">@message.value</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<(string type, string value)> messages = new();
    private string? userInput;
    private string? messageInput;

    private string MessageStyle(string type) => $"msg-{type}".ToLower();

    const string onPick = nameof(MessageType.OnPick);
    const string onError = nameof(MessageType.OnError);

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<MessageType.OnPick>(onPick, (pickData) =>
        {
            var encodedMsg = $"{pickData.Username} picked {pickData.Count} {pickData.ItemName}";
            messages.Add((onPick, encodedMsg));
            StateHasChanged();
        });

        hubConnection.On<MessageType.OnError>(onError, (err) =>
        {
            var encodedMsg = $"{err.Username} error: {err.Message}";
            messages.Add((onError, encodedMsg));
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Pick()
    {
        if (string.IsNullOrEmpty(userInput))
        {
            return;
        }
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("PickItem", userInput, messageInput);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}